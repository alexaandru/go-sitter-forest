(source_file (comment) (comment) (comment) (block_comment (block_comment_text (block_comment (block_comment_text)))) (top_level_declarations (struct_declaration name: (identifier) (struct_or_union (struct_or_union_block (comment) (variable_declaration name: (identifier) type: (types (identifier))) (variable_declaration name: (identifier) type: (types (identifier)) (string (string_content) (escape_sequence) (string_content) (escape_sequence) (string_content) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence))) (variable_declaration name: (identifier) (integer)) (variable_declaration name: (identifier) type: (types (identifier)) (float)) (const_declaration name: (identifier) type: (types (identifier)) (string (string_content))) (const_declaration name: (identifier) (unary_expression argument: (integer))) (const_declaration name: (identifier) type: (types (identifier)) (char_string (string (string_content)))) (comment))))) (top_level_declarations (struct_declaration name: (identifier) (struct_or_union modifier: (named_parameters parameters: (parameter name: (identifier) type: (types (identifier)) name: (identifier))) (struct_or_union_block)))) (top_level_declarations (procedure_declaration name: (identifier) (procedure (assignment_parameters)) (block (statement (call_expression function: (identifier) (assignment_parameters argument: (identifier) argument: (identifier)))) (comment) (statement (declarations_that_require_a_semicolon (variable_declaration name: (identifier) (struct_literal type: (identifier))))) (statement (declarations_that_require_a_semicolon (variable_declaration name: (identifier) (struct_literal type: (types (parameterized_struct_type type: (identifier) (assignment_parameters argument: (integer)))))))) (comment) (statement (declarations_that_require_a_semicolon (variable_declaration name: (identifier) type: (types (parameterized_struct_type type: (identifier) (assignment_parameters argument: (integer) argument: (integer) argument: (integer) argument: (string (string_content))))) (struct_literal parameter: (integer) parameter: (integer) parameter: (integer) parameter: (string (string_content)))))) (comment) (statement (call_expression function: (identifier) (assignment_parameters argument: (struct_literal type: (types (parameterized_struct_type type: (identifier) (assignment_parameters argument: (identifier)))) name: (identifier) parameter: (integer) name: (identifier) parameter: (integer))))) (comment) (comment) (statement (declarations_that_require_a_semicolon (variable_declaration name: (identifier) type: (types (parameterized_struct_type type: (identifier) (assignment_parameters named_argument: (identifier) argument: (call_expression function: (identifier) (assignment_parameters named_argument: (identifier) argument: (identifier))))))))) (comment) (statement (declarations_that_require_a_semicolon (variable_declaration name: (identifier) type: (types (procedure (assignment_parameters argument: (identifier) argument: (identifier)) result: (procedure_returns (returns (identifier_type type: (identifier))))))))) (statement (declarations_that_require_a_semicolon (variable_declaration name: (identifier) (call_expression function: (identifier) (assignment_parameters))))) (comment) (statement (declarations_that_require_a_semicolon (variable_declaration name: (identifier) name: (identifier) (integer) (integer)))) (statement (declarations_that_require_a_semicolon (const_declaration name: (identifier) name: (identifier) (integer) (integer)))) (statement (declarations_that_require_a_semicolon (variable_declaration name: (identifier) name: (identifier) type: (types (array_type type: (identifier))) (array_literal (string) (string)) (array_literal type: (identifier) (string) (string))))) (statement (declarations_that_require_a_semicolon (variable_declaration name: (identifier) name: (identifier) (call_expression function: (identifier) (assignment_parameters argument: (string (string_content))))))) (statement (assignment_statement (identifier) (identifier) (call_expression function: (identifier) (assignment_parameters argument: (string (string_content)))))) (statement (declarations_that_require_a_semicolon (const_declaration name: (identifier) name: (identifier) (call_expression function: (identifier) (assignment_parameters argument: (string (string_content))))))) (comment) (statement (declarations_that_require_a_semicolon (variable_declaration name: (identifier) name: (identifier) name: (identifier) name: (identifier) name: (identifier) (integer) (integer) (integer) (integer) (integer)))) (statement (declarations_that_require_a_semicolon (const_declaration name: (identifier) name: (identifier) name: (identifier) name: (identifier) name: (identifier) (integer) (integer) (integer) (integer) (integer)))) (comment) (statement (assignment_statement (identifier) (identifier) (identifier) (identifier) (identifier) (integer) (integer) (integer) (integer) (integer))) (statement (update_statement (identifier) (identifier) (identifier) (identifier) (identifier) (integer) (integer) (integer) (integer) (integer))) (statement (declarations_that_require_a_semicolon (variable_declaration name: (identifier) (address name: (identifier))))) (statement (if_statement (if_statement_condition_and_consequence condition: (if_condition (binary_expression left: (call_expression function: (identifier) (assignment_parameters argument: (string (string_content)))) right: (integer))) (comment) consequence: (statement (call_expression function: (identifier) (assignment_parameters argument: (string (string_content) (escape_sequence))))) alternative: (else_clause consequence: (statement (call_expression function: (identifier) (assignment_parameters argument: (string (string_content) (escape_sequence))))))))) (statement (static_if_statement directive: (compiler_directive) directive: (compiler_directive) (if_statement_condition_and_consequence condition: (if_condition (binary_expression name: (identifier) right: (null))) consequence: (statement (block (statement (call_expression function: (identifier) (assignment_parameters argument: (string)))))) alternative: (else_clause consequence: (statement (static_if_statement directive: (compiler_directive) directive: (compiler_directive) (if_statement_condition_and_consequence condition: (if_condition (binary_expression name: (identifier) right: (struct_literal))) consequence: (statement (block (statement (call_expression function: (identifier) (assignment_parameters argument: (string)))))) alternative: (else_clause consequence: (statement (block (statement (call_expression function: (identifier) (assignment_parameters argument: (string)))))))))))))) (statement (if_statement (if_statement_condition_and_consequence condition: (if_condition name: (identifier)) consequence: (statement (call_expression function: (identifier) (assignment_parameters argument: (string)))) alternative: (else_clause consequence: (statement (if_statement (if_statement_condition_and_consequence condition: (if_condition name: (identifier)) consequence: (statement (call_expression function: (identifier) (assignment_parameters argument: (string)))) alternative: (else_clause consequence: (statement (call_expression function: (identifier) (assignment_parameters argument: (string)))))))))))) (comment) (statement (if_statement (if_statement_condition_and_consequence condition: (if_condition (binary_expression left: (integer) right: (pointer_expression name: (identifier)))) consequence: (statement (call_expression function: (identifier) (assignment_parameters)))))) (statement (if_statement (if_statement_condition_and_consequence condition: (if_condition (binary_expression name: (identifier) right: (integer))) consequence: (statement (call_expression function: (identifier) (assignment_parameters argument: (string (string_content) (escape_sequence))))) alternative: (else_clause consequence: (statement (call_expression function: (identifier) (assignment_parameters argument: (string (string_content) (escape_sequence))))))))) (comment) (statement (declarations_that_require_a_semicolon (variable_declaration name: (identifier) (if_expression name: (identifier) consequence: (member_expression (identifier) (identifier)) alternative: (string))))) (statement (declarations_that_require_a_semicolon (variable_declaration name: (identifier) (if_expression name: (identifier) consequence: (member_expression (identifier) (identifier)))))) (comment) (statement (declarations_that_require_a_semicolon (variable_declaration name: (identifier) (if_expression name: (identifier) consequence: (block (statement (call_expression function: (identifier) (assignment_parameters argument: (string (string_content) (escape_sequence))))) (statement (call_expression function: (identifier) (assignment_parameters argument: (integer)))) (statement (member_expression (identifier) (identifier)))) alternative: (block (statement (call_expression function: (identifier) (assignment_parameters argument: (string (string_content) (escape_sequence))))) (statement (declarations_that_require_a_semicolon (variable_declaration name: (identifier) (integer)))) (statement (call_expression function: (identifier) (assignment_parameters argument: (string (string_content) (escape_sequence))))) (statement (call_expression function: (identifier) (assignment_parameters))))))) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (MISSING ";"))))) (top_level_declarations (procedure_declaration name: (identifier) (procedure (named_parameters parameters: (parameter name: (identifier) type: (types (polymorphic_type (types (identifier)))))) result: (procedure_returns (returns (types (procedure (named_parameters)))))) (block (statement (call_expression function: (identifier) (assignment_parameters argument: (string (string_content) (escape_sequence)) argument: (integer) argument: (identifier) argument: (string (string_content)) argument: (struct_literal parameter: (integer)) argument: (array_literal (integer))))) (statement (call_expression function: (identifier) (assignment_parameters argument: (string (string_content) (escape_sequence)) argument: (identifier))))))))
