(source_file (codeunit_declaration object_id: (integer) object_name: (quoted_identifier) (property_list (property (table_no_property value: (value (quoted_identifier)))) (property (subtype_property value: (value))) (property (single_instance_property value: (value (boolean)))) (property (event_subscriber_instance_property value: (value)))) (var_section (variable_declaration name: (identifier) type: (type_specification (basic_type)))) (onrun_trigger (var_section (variable_declaration name: (identifier) type: (type_specification (text_type)))) (code_block (assignment_statement left: (identifier) right: (string_literal)) (call_expression function: (identifier) arguments: (argument_list (identifier))) (call_expression function: (identifier) arguments: (argument_list (identifier) (identifier))))) (procedure modifier: (procedure_modifier) name: (name) (parameter_list (parameter modifier: (modifier) parameter_name: (name) parameter_type: (type_specification (basic_type))) (parameter parameter_name: (name) parameter_type: (type_specification (text_type)))) return_type: (return_type (type_specification (basic_type))) (var_section (variable_declaration name: (identifier) type: (type_specification (basic_type)))) (code_block (assignment_statement left: (identifier) right: (integer)) (assignment_statement left: (identifier) right: (decimal)) (if_statement condition: (comparison_expression left: (identifier) operator: (comparison_operator) right: (integer)) then_branch: (exit_statement return_value: (multiplicative_expression left: (identifier) right: (integer))) else_branch: (case_statement expression: (identifier) (case_branch left: (range_expression left: (integer) (ERROR (integer)) right: (identifier)) (ERROR) operator: (comparison_operator) right: (multiplicative_expression left: (identifier) right: (range_expression left: (identifier) (ERROR) right: (integer))) statements: (assignment_statement left: (identifier) right: (additive_expression left: (identifier) right: (identifier)))))) (while_statement condition: (comparison_expression left: (identifier) operator: (comparison_operator) right: (integer)) body: (code_block (assignment_statement left: (identifier) right: (integer)) (assignment_statement left: (identifier) right: (decimal)))) (repeat_statement (assignment_statement left: (identifier) right: (integer)) (assignment_statement left: (identifier) right: (decimal)) condition: (comparison_expression left: (identifier) operator: (comparison_operator) right: (integer))) (exit_statement return_value: (identifier)))) (attribute_list (attribute attribute_name: (identifier) (attribute_arguments arguments: (expression_list (qualified_enum_value enum_type: (identifier)) (qualified_enum_value enum_type: (identifier) value: (quoted_identifier)) (string_literal) (string_literal) (boolean) (boolean))))) (procedure modifier: (procedure_modifier) name: (name) (parameter_list (parameter modifier: (modifier) parameter_name: (name) parameter_type: (type_specification (record_type reference: (identifier))))) (code_block (comment))) (trigger_declaration name: (trigger_name) (parameter_list (parameter parameter_name: (name) parameter_type: (type_specification (basic_type))) (parameter parameter_name: (name) parameter_type: (type_specification (text_type))) (parameter parameter_name: (name) parameter_type: (type_specification (text_type))) (parameter parameter_name: (name) parameter_type: (type_specification (identifier))) (parameter parameter_name: (name) parameter_type: (type_specification (basic_type)))) (code_block (if_statement condition: (identifier) then_branch: (call_expression function: (identifier) arguments: (argument_list (string_literal) (identifier) (identifier))) else_branch: (call_expression function: (identifier) arguments: (argument_list (string_literal) (identifier) (identifier)))))) (trigger_declaration name: (trigger_name) (parameter_list (parameter parameter_name: (name) parameter_type: (type_specification (basic_type))) (parameter parameter_name: (name) parameter_type: (type_specification (text_type))) (parameter parameter_name: (name) parameter_type: (type_specification (text_type))) (parameter parameter_name: (name) parameter_type: (type_specification (identifier)))) (type_specification (basic_type)) (code_block (call_expression function: (identifier) arguments: (argument_list (string_literal) (identifier) (identifier))) (exit_statement return_value: (boolean))))))
